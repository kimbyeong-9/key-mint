import { useState, useEffect } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import styled from 'styled-components';
import { useUser } from '../contexts/UserContext';
import { signInWithEmail } from '../lib/supabase';
import PasswordInput from '../components/PasswordInput';
import TextInput from '../components/TextInput';
import InputGroup from '../components/InputGroup';

const Container = styled.div`
  min-height: calc(100vh - 200px);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: ${({ theme }) => theme.spacing(4)} ${({ theme }) => theme.spacing(3)};

  @media (max-width: ${({ theme }) => theme.breakpoints.tablet}) {
    padding: ${({ theme }) => theme.spacing(3)} ${({ theme }) => theme.spacing(2)};
  }

  @media (max-width: ${({ theme }) => theme.breakpoints.mobile}) {
    padding: ${({ theme }) => theme.spacing(2)};
    align-items: flex-start;
  }
`;

const LoginBox = styled.div`
  width: 100%;
  max-width: 480px;
  background: ${({ theme }) => theme.colors.card};
  border: 1px solid ${({ theme }) => theme.colors.border};
  border-radius: ${({ theme }) => theme.radius.lg};
  padding: ${({ theme }) => theme.spacing(4)};
  box-shadow: ${({ theme }) => theme.shadow.lg};

  @media (max-width: ${({ theme }) => theme.breakpoints.tablet}) {
    padding: ${({ theme }) => theme.spacing(3)};
  }

  @media (max-width: ${({ theme }) => theme.breakpoints.mobile}) {
    padding: ${({ theme }) => theme.spacing(2)};
    border-radius: ${({ theme }) => theme.radius.md};
  }
`;

const Title = styled.h1`
  font-size: ${({ theme }) => theme.font.size.xxl};
  font-weight: ${({ theme }) => theme.font.weight.bold};
  color: ${({ theme }) => theme.colors.text};
  margin-bottom: ${({ theme }) => theme.spacing(1)};
  text-align: center;
`;

const Subtitle = styled.p`
  font-size: ${({ theme }) => theme.font.size.md};
  color: ${({ theme }) => theme.colors.textSub};
  text-align: center;
  margin-bottom: ${({ theme }) => theme.spacing(4)};
`;

const Form = styled.form`
  display: flex;
  flex-direction: column;
  gap: ${({ theme }) => theme.spacing(2.5)};
`;


const Button = styled.button`
  padding: ${({ theme }) => theme.spacing(1.5)};
  background: ${({ theme }) => theme.colors.primary};
  color: ${({ theme }) => theme.colors.text};
  border: none;
  border-radius: ${({ theme }) => theme.radius.md};
  font-size: ${({ theme }) => theme.font.size.md};
  font-weight: ${({ theme }) => theme.font.weight.semibold};
  cursor: pointer;
  transition: ${({ theme }) => theme.transition.normal};

  &:hover {
    background: ${({ theme }) => theme.colors.hover};
    transform: translateY(-2px);
    box-shadow: ${({ theme }) => theme.shadow.primary};
  }

  &:active {
    transform: translateY(0);
  }

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }
`;


const LinkGroup = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: ${({ theme }) => theme.spacing(2)};
`;

const StyledLink = styled(Link)`
  font-size: ${({ theme }) => theme.font.size.sm};
  color: ${({ theme }) => theme.colors.textSub};
  transition: ${({ theme }) => theme.transition.fast};

  &:hover {
    color: ${({ theme }) => theme.colors.primary};
  }
`;


const SignupLink = styled.div`
  text-align: center;
  margin-top: ${({ theme }) => theme.spacing(3)};
  padding-top: ${({ theme }) => theme.spacing(3)};
  border-top: 1px solid ${({ theme }) => theme.colors.border};
  font-size: ${({ theme }) => theme.font.size.sm};
  color: ${({ theme }) => theme.colors.textSub};

  a {
    color: ${({ theme }) => theme.colors.primary};
    font-weight: ${({ theme }) => theme.font.weight.semibold};
    margin-left: ${({ theme }) => theme.spacing(1)};

    &:hover {
      text-decoration: underline;
    }
  }
`;

function Login() {
  const navigate = useNavigate();
  const { setUser } = useUser();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  // 컴포넌트 마운트 시 필드 초기화
  useEffect(() => {
    setEmail('');
    setPassword('');
    
    // DOM이 렌더링된 후 필드 값 강제 초기화
    const timer = setTimeout(() => {
      const emailInput = document.getElementById('email');
      const passwordInput = document.getElementById('password');
      
      if (emailInput) {
        emailInput.value = '';
        emailInput.setAttribute('autocomplete', 'new-email');
      }
      if (passwordInput) {
        passwordInput.value = '';
        passwordInput.setAttribute('autocomplete', 'new-password');
      }
    }, 100);

    return () => clearTimeout(timer);
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setError('');

    try {
      console.log('🔍 로그인 시도:', { email });

      // Supabase Auth를 사용한 로그인
      const authResult = await signInWithEmail(email, password);
      
      if (authResult.user) {
        console.log('✅ Auth 로그인 성공:', authResult.user);

        // 사용자 정보를 UserContext에 설정
        const userData = {
          id: authResult.user.id,
          email: authResult.user.email,
          username: authResult.user.user_metadata?.username || authResult.user.user_metadata?.display_name || 'Unknown',
          display_name: authResult.user.user_metadata?.display_name || authResult.user.user_metadata?.username || authResult.user.user_metadata?.full_name || 'Unknown',
          address: authResult.user.user_metadata?.address || null,
          wallet_address: authResult.user.user_metadata?.wallet_address || null,
          is_web3_user: authResult.user.user_metadata?.is_web3_user || false,
          created_at: authResult.user.created_at,
        };

        // UserContext의 setUser 함수 호출
        setUser(userData);

        alert(`로그인 성공! 환영합니다, ${userData.display_name}님!`);
        navigate('/');
      } else {
        alert('로그인에 실패했습니다. 이메일과 비밀번호를 확인해주세요.');
      }
    } catch (error) {
      console.error('❌ 로그인 오류:', error);
      
      // MCP 로그인 오류 메시지 처리
      let errorMessage = '로그인에 실패했습니다.';
      
      if (error.message.includes('사용자를 찾을 수 없습니다') || error.message.includes('이메일 또는 비밀번호가 올바르지 않습니다')) {
        errorMessage = '이메일 또는 비밀번호가 올바르지 않습니다.';
      } else if (error.message.includes('비밀번호가 설정되지 않았습니다')) {
        errorMessage = '계정에 문제가 있습니다. 관리자에게 문의해주세요.';
      } else if (error.message.includes('비밀번호 불일치')) {
        errorMessage = '비밀번호가 올바르지 않습니다.';
      } else {
        errorMessage = `로그인 오류: ${error.message}`;
      }
      
      setError(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };


  return (
    <Container>
      <LoginBox>
        <Title>로그인</Title>
        <Subtitle>Key Mint에 오신 것을 환영합니다</Subtitle>

        <Form 
          onSubmit={handleSubmit} 
          autoComplete="off"
          data-lpignore="true"
          data-1p-ignore="true"
        >
          {/* 더미 필드로 자동완성 혼란시키기 */}
          <div style={{ display: 'none' }}>
            <input type="text" name="fake-username" autoComplete="username" />
            <input type="password" name="fake-password" autoComplete="current-password" />
          </div>
          
          <InputGroup
            label="이메일"
            htmlFor="email"
          >
            <TextInput
              type="email"
              id="email"
              name="login-email"
              placeholder="이메일을 입력하세요"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              autoComplete="new-email"
              autoCorrect="off"
              autoCapitalize="off"
              spellCheck="false"
              data-form-type="other"
              data-lpignore="true"
              data-1p-ignore="true"
              required
            />
          </InputGroup>

          <InputGroup
            label="비밀번호"
            htmlFor="password"
          >
            <PasswordInput
              id="password"
              name="password"
              placeholder="비밀번호를 입력하세요"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </InputGroup>

          <Button type="submit" disabled={isLoading}>
            {isLoading ? '로그인 중...' : '로그인'}
          </Button>

          {error && (
            <div style={{ 
              color: '#ef4444', 
              fontSize: '14px', 
              textAlign: 'center', 
              marginTop: '10px',
              padding: '8px',
              backgroundColor: '#fef2f2',
              border: '1px solid #fecaca',
              borderRadius: '6px'
            }}>
              {error}
            </div>
          )}

          <LinkGroup>
            <StyledLink to="#">아이디 찾기</StyledLink>
            <StyledLink to="#">비밀번호 찾기</StyledLink>
          </LinkGroup>
        </Form>


        <SignupLink>
          계정이 없으신가요?
          <Link to="/signup">회원가입</Link>
        </SignupLink>
      </LoginBox>
    </Container>
  );
}

export default Login;
